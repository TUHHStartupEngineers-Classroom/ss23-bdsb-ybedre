{
  "hash": "f7e9656d29741738334205f054f4f00f",
  "result": {
    "markdown": "---\ntitle: \"03 Data Wrangling\"\nauthor: \"Yashas Bedre Raghavendra\"\ndate: \"2023-05\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    df_print: paged\n    collapsed: false\n    number_sections: true\n    toc_depth: 3\n    code_folding: hide\n---\n\n\n\n\n# Third Assignment : Data Wrangling\n\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-1_64e775a7efd1fb0eebab0f0a8e50b572'}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(tictoc)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ readr::col_character()   masks vroom::col_character()\n#> ✖ readr::col_date()        masks vroom::col_date()\n#> ✖ readr::col_datetime()    masks vroom::col_datetime()\n#> ✖ readr::col_double()      masks vroom::col_double()\n#> ✖ readr::col_factor()      masks vroom::col_factor()\n#> ✖ readr::col_guess()       masks vroom::col_guess()\n#> ✖ readr::col_integer()     masks vroom::col_integer()\n#> ✖ readr::col_logical()     masks vroom::col_logical()\n#> ✖ readr::col_number()      masks vroom::col_number()\n#> ✖ readr::col_skip()        masks vroom::col_skip()\n#> ✖ readr::col_time()        masks vroom::col_time()\n#> ✖ readr::cols()            masks vroom::cols()\n#> ✖ readr::date_names_lang() masks vroom::date_names_lang()\n#> ✖ readr::default_locale()  masks vroom::default_locale()\n#> ✖ dplyr::filter()          masks stats::filter()\n#> ✖ readr::fwf_cols()        masks vroom::fwf_cols()\n#> ✖ readr::fwf_empty()       masks vroom::fwf_empty()\n#> ✖ readr::fwf_positions()   masks vroom::fwf_positions()\n#> ✖ readr::fwf_widths()      masks vroom::fwf_widths()\n#> ✖ dplyr::lag()             masks stats::lag()\n#> ✖ readr::locale()          masks vroom::locale()\n#> ✖ readr::output_column()   masks vroom::output_column()\n#> ✖ readr::problems()        masks vroom::problems()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'data.table'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     hour, isoweek, mday, minute, month, quarter, second, wday, week,\n#>     yday, year\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     between, first, last\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     transpose\n#> \n#> The following object is masked from 'package:tictoc':\n#> \n#>     shift\n```\n:::\n:::\n\ncol_types <- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\npatent_tbl <- vroom(\n  file       = \"Patent_data/patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\nuspc_tbl <- vroom(\n  file       = \"Patent_data/uspc.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\npatent_assignee_tbl <- vroom(\n  file       = \"Patent_data/patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\nassignee_tbl <- vroom(\n  file       = \"Patent_data/assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n#---------------------Qustion 1------------------------\nclass(assignee_tbl)\nsetDT(assignee_tbl)\nclass(patent_assignee_tbl)\nsetDT(patent_assignee_tbl)\nclass(patent_tbl)\nsetDT(patent_tbl)\ntic()\nQ1_patent_data <- merge(x = patent_assignee_tbl, y = assignee_tbl, \n                       by.x=\"assignee_id\", by.y =\"id\",\n                       all.x = TRUE, \n                       all.y = FALSE)\ntoc()\nsetkey(Q1_patent_data, \"assignee_id\")\nkey(Q1_patent_data)\nQ1_patent_data %>% dim()\nkeep_cols <- c(\"assignee_id\",\"patent_id\",\"organization\")\nQ1_patent_data <- Q1_patent_data[, ..keep_cols]\nQ1_patent_data %>% dim()\nQ1_patent_data %>% glimpse()\n#Count_Q1 contains the data of the companies/organisations and the number of patents they hold in decending oreder\ntic()\nCount_Q1<- Q1_patent_data %>%\n  filter(!is.na(organization)) %>%\n  count(organization)%>% arrange(desc(n))\ntoc()\n#Print the top 10 companies with max patents\nhead(Count_Q1,10)\n#---------------------Qustion 2------------------------\nclass(patent_tbl)\nsetDT(patent_tbl)\n#Q2_patent_all has patent,patentdata,asignee data merged\ntic()\nQ2_patent_all <- merge(x = patent_tbl, y = Q1_patent_data, \n                        by.x=\"id\", by.y =\"patent_id\",\n                        all.x = TRUE, \n                        all.y = FALSE)\ntoc()\n#Selecting a timeframe (Aug 1 2014 to Aug 31 2014) and building a new data frame Q2_Aug_patents\nQ2_Aug_patents<- with(Q2_patent_all, Q2_patent_all[(date >= \"2014-08-01\" & date <= \"2014-08-31\") ])\n#Count_Aug has the data of all the organisations that got a patent in Aug 2014 in desc order \n#with number of patents\ntic()\nCount_Aug<- Q2_Aug_patents %>%\n  filter(!is.na(organization)) %>%\n  count(organization)%>% arrange(desc(n))\ntoc()\n#Company with most patents in August 2014\nhead(Count_Aug,1)\n#Top 10 companies with new patents in August 2014\nhead(Count_Aug,10)\n#---------------------Qustion 3------------------------\ntic()\nQ3_patent_all <- merge(x = uspc_tbl, y = Q1_patent_data, \n                       by.x=\"patent_id\", by.y =\"patent_id\",\n                       all.x = TRUE, \n                       all.y = FALSE)\ntoc()\n#Most innovative class can be calculated by summing the total number of patents for each class\ntic()\nmostinnovative_class_Q3<- Q3_patent_all %>%\n  filter(!is.na(mainclass_id)) %>%\n  count(mainclass_id)%>% arrange(desc(n))\ntoc()\n\n#making a df of top10 companies only to investigate the top 5 uspto\nQ3_top10 <- Q3_patent_all[Q3_patent_all$organization %in% c('International Business Machines Corporation','Samsung Electronics Co., Ltd.','Canon Kabushiki Kaisha','Sony Corporation','Microsoft Corporation','Google Inc.','Kabushiki Kaisha Toshiba','QUALCOMM Incorporated','LG Electronics Inc.','Panasonic Corporation'),]\n#adding a new column with has Company name & Class togeather titled \"Company_Class\"\nQ3_top10$Company_Class <- paste(Q3_top10$organization, Q3_top10$mainclass_id)\n#Counting the Company_class and arranging in desc order\ntic()\nQ3_top10_CC<- Q3_top10 %>%\n  count(Company_Class)%>% arrange(desc(n))\ntoc()\n\n#displaying the most innovative class and its corresponding number of patents of that class\nhead(mostinnovative_class_Q3,1)\n\n#Shows the top 5 USPTO Classes from the top 10 companies granted patents\nhead(Q3_top10_CC,5)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}